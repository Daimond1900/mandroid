MVP      全称 ： Model-View-Presenter  分离UI层与业务层的一种开发模式

View、Model、Presenter层

在MVP模式里通常包含4个要素：

(1) View :负责绘制UI元素、与用户进行交互(在Android中体现为Activity);

(2) View interface :需要View实现的接口，View通过View interface与Presenter进行交互，降低耦合，方便进行单元测试;

(3) Model :负责存储、检索、操纵数据(有时也实现一个Model interface用来降低耦合);

(4) Presenter :作为View与Model交互的中间纽带，处理与用户交互的负责逻辑。

-------------------------------------------------------------------------------------------------------
M 
    模型：表示数据模型和业务逻辑(business logic)。模型并不总是DataSet，DataTable之类的东西，它代表着一类组件(components)或类(class)，
    这些组件或类可以向外部提供数据，同时也能从外部获取数据并将这些数据存储在某个地方。简单的理解，可以把模型想象成“外观类(facade class)”。
    译注：这里的外观是指“外观模式”中所说的外观。外观的一般作用是为一个复杂的子系统提供高层次的简单易用的访问接口，可以参看下面的图来理解它的原理：

    model层主要负责：

        · 从网络，数据库，文件，传感器，第三方等数据源读写数据。

        · 对外部的数据类型进行解析转换为APP内部数据交由上层处理。

        · 对数据的临时存储,管理，协调上层数据请求。
-------------------------------------------------------------------------------------------------------
V
    视图：将数据呈现给用户。一般的视图都只是包含用户界面(UI)，而不包含界面逻辑。
    比如，Asp.net中包含控件的页面(page)就是一个视图。视图可以从模型中读取数据，但是不能修改或更新模型。

    view 层主要负责：

        · 提供UI交互

        · 在presenter的控制下修改UI。

        · 将业务事件交由presenter处理。

        注意: View层不存储数据，不与Model层交互。

        在Android中View层一般是Activity、Fragment、View（控件）、ViewGroup（布局等）等。
-------------------------------------------------------------------------------------------------------
X（C-Controller、P-Presenter、VM-ViewModel）
    
    P:
        层现器：
            作为View与Model交互的中间纽带，处理与用户交互的负责逻辑。
            Presenter包含了根据用户在视图中的行为去更新模型的逻辑。
            视图仅仅只是将用户的行为告知Presenter，而Presenter负责从视图中取得数据然后发送给模型。
